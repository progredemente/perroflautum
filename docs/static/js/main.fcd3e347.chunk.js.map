{"version":3,"sources":["errejon.png","Icon.js","App.js","reportWebVitals.js","index.js"],"names":["Icon","className","style","this","props","icon","Component","App","changeParagraphs","evt","setState","paragraphs","target","value","changeWords","words","changeText","originalText","text","sort","a","b","Math","random","finalText","state","mode","i","push","length","originalWords","join","split","finalWords","wordCount","amountOfWordsToAdd","slice","finalWordsJoin","match","substring","copy","navigator","clipboard","writeText","textRef","current","innerText","createRef","href","rel","htmlFor","name","onClick","type","onChange","ref","src","errejon","alt","map","t","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fcd3e347.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/errejon.3e58229e.png\";","import {Component} from 'react';\nimport './Icon.css';\n\nclass Icon extends Component{\n\n    render() {\n        return (\n            <span className=\"icon\" style={{\"--content\": `\"${this.props.icon}\"`}}></span>\n        )\n    };\n}\n\nexport default Icon;\n","import { Component, createRef } from 'react';\nimport './App.css';\nimport text from './text.json';\nimport errejon from './errejon.png';\nimport Icon from './Icon';\n\nclass App extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            text: null,\n            mode: \"paragraphs\",\n            paragraphs: 3,\n            words: 100\n        }\n        this.textRef = createRef();\n    }\n\n    componentDidMount() {\n        this.changeText();\n    }\n\n    changeParagraphs = (evt) => {\n        this.setState({paragraphs: evt.target.value});\n    }\n\n    changeWords = (evt) => {\n        this.setState({words: evt.target.value});\n    }\n\n    changeText = () => {\n        const originalText = text.sort((a, b) => 0.5 - Math.random());\n        let finalText = [];\n        switch(this.state.mode) {\n            case \"paragraphs\":\n                for(let i = 0; i < this.state.paragraphs; i++) {\n                    finalText.push(originalText[i % originalText.length]);\n                }\n                break;\n            case \"words\":\n                const originalWords = originalText.join(\" \").split(\" \");\n                let finalWords = [];\n                let wordCount = this.state.words;\n                while(wordCount > 0) {\n                    const amountOfWordsToAdd = wordCount > originalWords.length ? originalWords.length : wordCount;\n                    wordCount -= amountOfWordsToAdd;\n                    finalWords.push(...originalWords.slice(0, amountOfWordsToAdd));\n                }\n                let finalWordsJoin = finalWords.join(\" \");\n                if(finalWordsJoin.match(/[,;]$/)){\n                    finalWordsJoin = finalWordsJoin.substring(0, finalWordsJoin.length - 1);\n                }\n                if(!finalWordsJoin.match(/[.?]$/)){\n                    if(finalWordsJoin.match(/¿[^.?]*$/)) {\n                        finalWordsJoin += \"?\";\n                    }\n                    else {\n                        finalWordsJoin += \".\"\n                    }\n                }\n                finalText.push(finalWordsJoin)\n                break;\n            default: break;\n        }\n        this.setState({text: finalText})\n    }\n\n    copy = () => {\n        navigator.clipboard.writeText(this.textRef.current.innerText);\n    }\n\n    render() {\n        return (\n            <div>\n                <header>\n                    <h1>\n                        <div>PERRO FLAUTUM</div>\n                        <div>El generador de lorem ipsum<br />en perroflautés</div>\n                        <div>por <a href=\"/\" target=\"_blank\">progredemente</a><br />textos del canal de <a href=\"https://www.youtube.com/watch?v=W8b3_hI8Bic&list=PL-5YtFfXdaFRGdJmqlqztuXgXcVmGNIw-&index=2&ab_channel=FernandoD%C3%ADazVillanueva\" target=\"_blank\" rel=\"noreferrer noopener\">FDV</a></div>\n                        \n                    </h1>\n                </header>\n                <div className=\"controls\">\n                    <div>\n                        <label htmlFor=\"mode\">Modo de generación:&nbsp;</label>\n                        <div name=\"mode\" className=\"mode\">\n                            <div className={this.state.mode === \"paragraphs\" ? \"selected\" : \"\"} onClick={() => { this.setState({mode: \"paragraphs\"})}}>Párrafos</div>\n                            <div className={this.state.mode === \"words\" ? \"selected\" : \"\"} onClick={() => { this.setState({mode: \"words\"})}}>Palabras</div>\n                        </div>\n                    </div>\n                    {\n                        this.state.mode === \"paragraphs\" &&\n                        <div>\n                            <label htmlFor=\"paragraphs\">Párrafos a generar:&nbsp;</label>\n                            <input type=\"number\" name=\"paragraphs\" value={this.state.paragraphs} onChange={this.changeParagraphs}/>\n                        </div>\n                    }\n                    {\n                        this.state.mode === \"words\" &&\n                        <div>\n                            <label htmlFor=\"words\">Palabras a generar:&nbsp;</label>\n                            <input type=\"number\" name=\"words\" value={this.state.words} onChange={this.changeWords}/>\n                        </div>\n                    }\n                    <div className=\"buttons\">\n                        <button onClick={this.changeText}>Generar</button>\n                        <button onClick={this.copy}>Copiar&nbsp;<Icon icon=\"C\"/></button>\n                    </div>\n                </div>\n                <div>\n                    <p ref={this.textRef} className=\"text\">\n                        <span className=\"errejon\">\n                            <img src={errejon} alt=\"errejon\"/>\n                        </span>\n                        {\n                            this.state.text != null && this.state.text.map((t, i) => {\n                                return (\n                                    <span key={i}>\n                                        {t}\n                                        { i < this.state.text.length - 1 && <><br /><br /></> }\n                                    </span>\n                                );\n                            })\n                        }\n                    </p>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}